# from bisect import bisect_left, bisect_right
# def calCountsByRange(nums, left_value, right_value):
#     r_i = bisect_right(nums, right_value)
#     l_i = bisect_left(nums, left_value)
#     return r_i - l_i

# nums = [-1, -3, 5, 5, 4, 7, 1, 7, 2, 5, 6]
# # 5 ~ 7 을 갖는 요소의 개수 구하기
# nums.sort()  # 정렬은 필수
# print(calCountsByRange(nums, 5, 7))

########################
# sum = 모든 줄 길이 더함
# count = sum / M
# count를 단위로 모든 줄을 각각 나눠 몫을 구함
# 각 몫을 다 더해서 11보다 크면 count 키우고, 작으면 내림

import sys
K, N = map(int, input().split())
lan = [int(sys.stdin.readline()) for _ in range(K)] #11
start, end = 1, max(lan) #이분탐색 처음과 끝위치
while start <= end: #적절한 선의 길이를 찾는 알고리즘
    mid = (start + end) // 2 #중간 위치
    print('mid:',mid, end=" ")
    lines = 0 #선 수
    for i in lan:
        lines += i // mid #분할 된 선 수
        print('lines:',lines)
        
    if lines >= N: #선의 개수가 분기점
        start = mid + 1
    else:
        end = mid - 1
print('end:',end)
