function solution(maps) {
    const n = maps.length;    // 맵의 세로 길이
    const m = maps[0].length; // 맵의 가로 길이
    const dx = [1, 0, -1, 0]; // 상하좌우 이동을 위한 dx 배열
    const dy = [0, 1, 0, -1]; // 상하좌우 이동을 위한 dy 배열
    const queue = [[0, 0]];  // 시작점을 큐에 추가
    maps[0][0] = 0;          // 시작점을 0으로 변경
    while (queue.length > 0) {
        const [x, y] = queue.shift(); // 큐에서 가장 먼저 추가된 좌표를 꺼냄
        for (let i = 0; i < 4; i++) { // 상하좌우 이동을 위한 반복문
            const nx = x + dx[i];     // 다음 좌표 계산
            const ny = y + dy[i];
            if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue; // 맵 범위를 벗어나면 건너뜀
            if (maps[nx][ny] === 0) continue; // 벽이면 건너뜀
            if (maps[nx][ny] === 1) { // 방문한 적 없는 길이면
                maps[nx][ny] = maps[x][y] + 1; // 거리를 계산하여 맵에 저장
                queue.push([nx, ny]); // 큐에 다음 좌표 추가
            }
        }
    }
    return maps[n - 1][m - 1] !== 1 ? maps[n - 1][m - 1] : -1; // 도착점까지의 거리 반환
}
